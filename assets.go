// Code generated by go-bindata.
// sources:
// assets/html/layout.html
// assets/html/navbar.html
// assets/html/table.html
// DO NOT EDIT!

package codeye

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsHtmlLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3d\x8f\xdb\x30\x0c\xdd\xf3\x2b\x58\xcd\xb5\x74\x06\x8a\xb6\x28\xe4\x1b\xfa\xb1\xb6\x1d\x6e\xe9\x48\x4b\x34\xac\xab\x3e\x02\x93\x71\x2e\x30\xfc\xdf\x0b\xdb\xf1\xe5\x32\x76\x32\x1f\x1f\xe9\xf7\x48\x6a\x9a\xc0\x53\x17\x32\x81\x8a\x78\x29\x27\x51\x30\xcf\x87\x83\x7d\xf7\xfd\xd7\xb7\xa7\x3f\xbf\x7f\x40\x2f\x29\x3e\x1e\xec\xf6\x01\xb0\x3d\xa1\x5f\x02\x00\x9b\x48\x10\x5c\x8f\x03\x93\x34\xea\x24\x5d\xf5\x59\xbd\xa5\x32\x26\x6a\xd4\x18\xe8\x7c\x2c\x83\x28\x70\x25\x0b\x65\x69\xd4\x39\x78\xe9\x1b\x4f\x63\x70\x54\xad\xe0\x3d\x84\x1c\x24\x60\xac\xd8\x61\xa4\xa6\xde\x7f\x24\x41\x22\x3d\x4e\x13\xe8\xa7\x25\x82\x79\xb6\x66\xcb\x6d\x7c\x0c\xf9\x2f\x0c\x14\x1b\xc5\x72\x89\xc4\x3d\x91\x28\xe8\x07\xea\x1a\xd5\x8b\x1c\xf9\x8b\x31\x09\x5f\x9c\xcf\xba\x2d\x45\x58\x06\x3c\x2e\xc0\x95\x64\xba\x92\xa5\xc2\x33\x71\x49\x64\x3e\xe8\x4f\xfa\xc1\x38\xe6\xbb\xb4\x4e\x21\x6b\xc7\xac\xfe\x43\xce\xf9\xfc\xcc\xda\xc5\x72\xf2\x5d\xc4\x81\x56\x2d\x7c\xc6\x17\x13\x43\xcb\xa6\x3d\xc5\x84\xe6\x41\x7f\xd4\xf5\x2a\xb7\xe2\x3b\x1d\x6b\xf6\x25\xdb\xb6\xf8\xcb\x26\x3d\x4d\x20\x94\x8e\x11\x85\x40\x65\x1c\x5b\x1c\x14\xe8\x9f\x6b\x30\xcf\x9b\x3b\x26\x27\xa1\x64\x70\x11\x99\x1b\x75\x85\x57\xef\x00\xd6\x87\x71\xe7\x96\x5b\x60\xc8\x34\xbc\xb2\xcb\x6d\xeb\x9d\x5e\x57\x0c\x81\xab\xfa\x0d\xbf\x9a\x78\xbd\xc3\xad\xcd\xf4\xf5\xad\x68\x29\xf9\x5a\xfc\xe5\x56\x61\x8d\x0f\xe3\x75\x7f\xe6\xea\x69\x1b\x73\x9b\xce\x9a\xed\x71\x1d\xa6\x09\x28\xfb\xa5\xf1\x5f\x00\x00\x00\xff\xff\xea\x52\x8f\x1d\x96\x02\x00\x00")

func assetsHtmlLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlLayoutHtml,
		"assets/html/layout.html",
	)
}

func assetsHtmlLayoutHtml() (*asset, error) {
	bytes, err := assetsHtmlLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/layout.html", size: 662, mode: os.FileMode(420), modTime: time.Unix(1515259251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHtmlNavbarHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x6a\xc3\x30\x10\x45\xf7\x39\xc5\x47\x7b\x55\x64\x2f\xfb\x08\xbd\xc3\x77\x34\xa9\x86\xca\x63\x90\x85\x5b\x10\xbe\x7b\xa9\xeb\x86\x36\xdb\xf7\x86\xc7\x67\x7a\x47\x92\xbb\x9a\xc0\x19\xb7\x89\xd5\x61\xdf\x2f\xd1\xb8\xe1\x56\xb8\xae\xc3\x89\xa1\xab\x4f\xac\xef\x0e\x75\x29\x72\x50\x7d\x63\xd3\xc5\x1c\x58\x95\xbe\x70\x92\x32\xb8\x99\x6a\xf8\x23\xc7\x0b\x10\x93\x3e\xd5\xfc\x54\x69\xe9\x90\x40\xe4\x93\xd4\x26\xb3\x43\xae\x72\x1f\x5c\x38\x8f\xfe\x57\x6e\x8b\x35\xaa\x49\x7d\x58\x20\xe6\xeb\xaf\x6e\xda\x8a\x20\x73\xf5\x4d\x3e\x9b\xff\xc8\xda\xc4\x8d\xbd\xe3\xe5\x95\xb3\x60\xdf\x63\xc8\xd7\x47\x37\x24\xdd\xce\x25\x81\xc7\xde\x1f\x12\x83\x71\x1b\x2f\xbd\x43\x2c\x7d\x7f\xe5\x2b\x00\x00\xff\xff\x14\x37\x64\x2c\x2c\x01\x00\x00")

func assetsHtmlNavbarHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlNavbarHtml,
		"assets/html/navbar.html",
	)
}

func assetsHtmlNavbarHtml() (*asset, error) {
	bytes, err := assetsHtmlNavbarHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/navbar.html", size: 300, mode: os.FileMode(420), modTime: time.Unix(1515255194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHtmlTableHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x4e\xc5\x30\x0c\x86\xf7\x9c\xc2\xea\x4e\x7b\x81\x90\x11\x31\x23\x2e\x90\x87\x5d\x1a\x29\x6a\x50\x62\xfa\x84\xac\xdc\x1d\xd9\x29\x65\x61\x60\xfb\xfe\xc4\xff\x27\xcb\x22\x80\xb4\xa6\x9d\x60\xe2\x78\xcb\x34\x41\xef\xce\x63\x3a\xe0\x2d\xc7\xd6\x1e\x27\x4e\x9c\x69\x0a\x0e\x40\x64\x7e\xd5\xa0\x03\x0b\xa6\x23\x38\xe7\xad\x73\x8d\x5a\x48\xed\xa1\x71\x4d\x1f\x84\x8a\x5b\x39\xa8\xfe\xbc\xaf\x9f\x39\xdf\x13\xf2\x66\x3e\xcf\x1b\x45\x54\x52\xae\x41\x04\x6a\xdc\xdf\x09\xe6\x67\x8a\x48\xb5\x77\xcf\x5b\x10\x99\x7b\xf7\x8b\x11\xed\x68\x5c\xad\xbe\x9c\x7d\x53\xdd\x0a\x7e\x0d\xd5\xaf\xe6\xa5\xdc\x9b\x4a\x6a\x00\x91\xf3\xad\x77\xf0\x8c\x97\x15\xf5\xcb\xb4\x60\xde\x33\x0c\xfd\x70\x9a\x7e\x2d\x85\xff\xda\xf4\xa9\x14\xfe\xcf\xa6\xa3\xef\x17\x3b\x51\x70\x22\x40\x3b\xea\xa9\xbf\x03\x00\x00\xff\xff\x07\xb6\xfb\x2e\x80\x01\x00\x00")

func assetsHtmlTableHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlTableHtml,
		"assets/html/table.html",
	)
}

func assetsHtmlTableHtml() (*asset, error) {
	bytes, err := assetsHtmlTableHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/table.html", size: 384, mode: os.FileMode(420), modTime: time.Unix(1515267127, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/html/layout.html": assetsHtmlLayoutHtml,
	"assets/html/navbar.html": assetsHtmlNavbarHtml,
	"assets/html/table.html": assetsHtmlTableHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"layout.html": &bintree{assetsHtmlLayoutHtml, map[string]*bintree{}},
			"navbar.html": &bintree{assetsHtmlNavbarHtml, map[string]*bintree{}},
			"table.html": &bintree{assetsHtmlTableHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

